   1               		.file	"phc.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__  = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.global __do_copy_data
   9               		.global __do_clear_bss
  11               		.text
  12               	.Ltext0:
  93               	.global	phc_init
  95               	phc_init:
   1:../lib/phc.c  **** /***************************************************************************
   2:../lib/phc.c  ****  *
   3:../lib/phc.c  ****  * OpenHC:                          ___                 _  _  ___
   4:../lib/phc.c  ****  *  Open source                    / _ \ _ __  ___ _ _ | || |/ __|
   5:../lib/phc.c  ****  *  Home                          | (_) | '_ \/ -_) ' \| __ | (__ 
   6:../lib/phc.c  ****  *  Control                        \___/| .__/\___|_||_|_||_|\___|
   7:../lib/phc.c  ****  * http://openhc.sourceforge.net/       |_| 
   8:../lib/phc.c  ****  *
   9:../lib/phc.c  ****  * Copyright (C) 2005 by Joerg Hohensohn
  10:../lib/phc.c  ****  *
  11:../lib/phc.c  ****  * All files in this archive are subject to the GNU General Public License.
  12:../lib/phc.c  ****  * See http://www.gnu.org/licenses/gpl-3.0.txt for full license agreement.
  13:../lib/phc.c  ****  *
  14:../lib/phc.c  ****  * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
  15:../lib/phc.c  ****  * KIND, either express or implied.
  16:../lib/phc.c  ****  *
  17:../lib/phc.c  ****  ****************************************************************************/ 
  18:../lib/phc.c  **** 
  19:../lib/phc.c  **** /*! \file phc.c
  20:../lib/phc.c  ****     \brief A small PHC stack, general PHC functions
  21:../lib/phc.c  ****     
  22:../lib/phc.c  ****     This is common code to breakdown the generic PHC protocol part.
  23:../lib/phc.c  **** */
  24:../lib/phc.c  **** 
  25:../lib/phc.c  **** #define __FILENUM__ 5 // every file needs to have a unique (8bit) ID
  26:../lib/phc.c  **** 
  27:../lib/phc.c  **** #include <stdint.h>
  28:../lib/phc.c  **** #include <util/crc16.h>
  29:../lib/phc.c  **** #include "hal.h"
  30:../lib/phc.c  **** #include "uart.h"
  31:../lib/phc.c  **** #include "timer.h"
  32:../lib/phc.c  **** #include "phc.h"
  33:../lib/phc.c  **** #include "random.h"
  34:../lib/phc.c  **** #ifdef DEBUG
  35:../lib/phc.c  **** #include "monitor.h" // for debug dump  ToDo: encapsulate into HAL
  36:../lib/phc.c  **** #endif
  37:../lib/phc.c  **** 
  38:../lib/phc.c  **** #define RETRY_INTERVAL (HZ/2) // interval within which we view twice the same packet as a retry
  39:../lib/phc.c  **** 
  40:../lib/phc.c  **** /*************** module state ***************/
  41:../lib/phc.c  **** 
  42:../lib/phc.c  **** static void (*pch_fn_start)(uint8_t address, uint8_t toggle, uint8_t len);
  43:../lib/phc.c  **** static void (*phc_fn_payload)(uint8_t pos, uint8_t byte);
  44:../lib/phc.c  **** static void (*phc_fn_end)(uint8_t valid, uint8_t retry);
  45:../lib/phc.c  **** 
  46:../lib/phc.c  **** // received packet info
  47:../lib/phc.c  **** static uint8_t phc_addr; // address byte
  48:../lib/phc.c  **** static uint8_t phc_len; // total payload byte count
  49:../lib/phc.c  **** static uint8_t phc_pos; // current payload byte count
  50:../lib/phc.c  **** static uint16_t phc_crc_rcv; // received CRC at packet end
  51:../lib/phc.c  **** static uint16_t phc_crc_calc; // calculated CRC
  52:../lib/phc.c  **** static enum
  53:../lib/phc.c  **** {
  54:../lib/phc.c  **** 	rcv_address, // 1st byte, module address
  55:../lib/phc.c  **** 	rcv_len, // 2nd byte, length and toggle
  56:../lib/phc.c  **** 	rcv_payload, // within packet payload, byte count done by input_pos
  57:../lib/phc.c  **** 	rcv_crc_lsb, // 2nd last byte, CRC LSB
  58:../lib/phc.c  **** 	rcv_crc_msb, // last byte, CRC MSB
  59:../lib/phc.c  **** } phc_rcv_state; // state machine for incoming bytes
  60:../lib/phc.c  **** 
  61:../lib/phc.c  **** // previous packet info
  62:../lib/phc.c  **** uint32_t phc_last_time; // timestamp of last packet in ticks 
  63:../lib/phc.c  **** uint16_t phc_last_crc; // just compare the CRC, not saving the full packet
  64:../lib/phc.c  **** 
  65:../lib/phc.c  **** 
  66:../lib/phc.c  **** /*************** private internal functions ***************/
  67:../lib/phc.c  **** 
  68:../lib/phc.c  **** // complete CRC across a buffer
  69:../lib/phc.c  **** static uint16_t crc16_buf(const uint8_t* buf, uint8_t n)
  70:../lib/phc.c  **** {
  71:../lib/phc.c  ****     uint16_t crc = 0xFFFF; // start value
  72:../lib/phc.c  **** 
  73:../lib/phc.c  ****     while(n--)
  74:../lib/phc.c  ****     {
  75:../lib/phc.c  **** 		crc = _crc_ccitt_update(crc, *buf++);
  76:../lib/phc.c  ****     }
  77:../lib/phc.c  ****     
  78:../lib/phc.c  ****     return crc ^ 0xFFFF; // inverted output
  79:../lib/phc.c  **** }
  80:../lib/phc.c  **** 
  81:../lib/phc.c  **** // (re)init, start new packet (possibly interrupt context)
  82:../lib/phc.c  **** static void packet_init(void)
  83:../lib/phc.c  **** {
  84:../lib/phc.c  **** 	phc_rcv_state = rcv_address; // reset state: 1st byte for receiver
  85:../lib/phc.c  **** 	phc_crc_calc = 0xFFFF;
  86:../lib/phc.c  **** }
  87:../lib/phc.c  **** 
  88:../lib/phc.c  **** 
  89:../lib/phc.c  **** /*************** public API functions ***************/
  90:../lib/phc.c  **** 
  91:../lib/phc.c  **** void phc_init(
  92:../lib/phc.c  ****     void (*cmd_start)(uint8_t address, uint8_t toggle, uint8_t len),
  93:../lib/phc.c  ****     void (*cmd_payload)(uint8_t pos, uint8_t byte),
  94:../lib/phc.c  ****     void (*cmd_end)(uint8_t valid, uint8_t retry))
  95:../lib/phc.c  **** {
  97               	.LM0:
  98               	.LFBB1:
  99               	/* prologue: function */
 100               	/* frame size = 0 */
  96:../lib/phc.c  ****     pch_fn_start = cmd_start;
 102               	.LM1:
 103 0000 9093 0000 		sts (pch_fn_start)+1,r25
 104 0004 8093 0000 		sts pch_fn_start,r24
  97:../lib/phc.c  ****     phc_fn_payload = cmd_payload;
 106               	.LM2:
 107 0008 7093 0000 		sts (phc_fn_payload)+1,r23
 108 000c 6093 0000 		sts phc_fn_payload,r22
  98:../lib/phc.c  ****     phc_fn_end = cmd_end;
 110               	.LM3:
 111 0010 5093 0000 		sts (phc_fn_end)+1,r21
 112 0014 4093 0000 		sts phc_fn_end,r20
 113               	.LBB17:
 114               	.LBB18:
 116               	.LM4:
 117 0018 1092 0000 		sts phc_rcv_state,__zero_reg__
 119               	.LM5:
 120 001c 8FEF      		ldi r24,lo8(-1)
 121 001e 9FEF      		ldi r25,hi8(-1)
 122 0020 9093 0000 		sts (phc_crc_calc)+1,r25
 123 0024 8093 0000 		sts phc_crc_calc,r24
 124               	/* epilogue start */
 125               	.LBE18:
 126               	.LBE17:
  99:../lib/phc.c  ****     
 100:../lib/phc.c  **** 	packet_init(); // reset receiver state machine
 101:../lib/phc.c  **** }
 128               	.LM6:
 129 0028 0895      		ret
 131               	.Lscope1:
 133               	.global	phc_timeout
 135               	phc_timeout:
 102:../lib/phc.c  **** 
 103:../lib/phc.c  **** #ifdef DEBUG
 104:../lib/phc.c  **** // debug function
 105:../lib/phc.c  **** void phc_packet_dump(const uint8_t* packet, uint8_t size)
 106:../lib/phc.c  **** {
 107:../lib/phc.c  **** 	const static char hex[] = "0123456789ABCDEF";
 108:../lib/phc.c  **** 	static char log_buf[3*33+1]; // # of bytes plus termination
 109:../lib/phc.c  **** 	char* run = log_buf;
 110:../lib/phc.c  **** 
 111:../lib/phc.c  **** 	if (size*3+1 > sizeof(log_buf))
 112:../lib/phc.c  **** 	{
 113:../lib/phc.c  **** 		size = sizeof(log_buf) / 3;
 114:../lib/phc.c  **** 	}
 115:../lib/phc.c  **** 
 116:../lib/phc.c  **** 	while (size--)
 117:../lib/phc.c  **** 	{	// convert to hex string
 118:../lib/phc.c  **** 		*run++ = hex[*packet / 16];
 119:../lib/phc.c  **** 		*run++ = hex[*packet++ % 16];
 120:../lib/phc.c  **** 		*run++ = ' ';
 121:../lib/phc.c  **** 	}	
 122:../lib/phc.c  **** 	*run++ = '\0';
 123:../lib/phc.c  **** 	acc_printf(ACC_TYPE_LISTBOX, ACC_TYPE_STRING, (const __far void*)log_buf, 0, 1);
 124:../lib/phc.c  **** }
 125:../lib/phc.c  **** #endif
 126:../lib/phc.c  **** 
 127:../lib/phc.c  **** 
 128:../lib/phc.c  **** // complete an outgoing packet and send it, don't retry nor block, returns >= 0 on success
 129:../lib/phc.c  **** uint8_t phc_send(uint8_t addr, uint8_t* packet, uint8_t size, uint8_t toggle)
 130:../lib/phc.c  **** {
 131:../lib/phc.c  **** 	uint16_t crc;
 132:../lib/phc.c  **** 
 133:../lib/phc.c  **** 	packet[0] = addr;
 134:../lib/phc.c  **** 	packet[1] = size | ((toggle) ? 0x80 : 0x00);
 135:../lib/phc.c  **** 
 136:../lib/phc.c  **** 	size += 2; // including address and length field
 137:../lib/phc.c  **** 
 138:../lib/phc.c  ****     crc = crc16_buf(packet, size); // size up to CRC
 139:../lib/phc.c  **** 
 140:../lib/phc.c  ****     packet[size]   = crc & 0xFF;
 141:../lib/phc.c  **** 	packet[size+1] =  crc >> 8;
 142:../lib/phc.c  **** 
 143:../lib/phc.c  **** 	size += 2; // size including CRC
 144:../lib/phc.c  ****     
 145:../lib/phc.c  ****     return uart_send(packet, size);
 146:../lib/phc.c  **** }
 147:../lib/phc.c  **** 
 148:../lib/phc.c  **** 
 149:../lib/phc.c  **** // receive a byte, generic packet parsing (interrupt context)
 150:../lib/phc.c  **** void phc_rcv_byte(uint8_t byte)
 151:../lib/phc.c  **** {
 152:../lib/phc.c  **** 	if (phc_rcv_state < rcv_crc_lsb)
 153:../lib/phc.c  ****     {
 154:../lib/phc.c  **** 		phc_crc_calc = _crc_ccitt_update(phc_crc_calc, byte); // update CRC
 155:../lib/phc.c  ****     }
 156:../lib/phc.c  ****     
 157:../lib/phc.c  ****     switch (phc_rcv_state)
 158:../lib/phc.c  **** 	{
 159:../lib/phc.c  **** 	case rcv_address:
 160:../lib/phc.c  **** 		phc_addr = byte;
 161:../lib/phc.c  **** 		phc_rcv_state = rcv_len;
 162:../lib/phc.c  ****         // use external event to get more randomness
 163:../lib/phc.c  ****         rand_randomize(timer_performance_counter());
 164:../lib/phc.c  **** 		break;
 165:../lib/phc.c  **** 
 166:../lib/phc.c  **** 	case rcv_len:
 167:../lib/phc.c  **** 		phc_len = byte & 0x7F; // without mask bit
 168:../lib/phc.c  **** 		pch_fn_start(phc_addr, byte >> 7, phc_len); // call start handler
 169:../lib/phc.c  **** 		if (phc_len)
 170:../lib/phc.c  **** 		{
 171:../lib/phc.c  **** 			phc_pos = 0;
 172:../lib/phc.c  **** 			phc_rcv_state = rcv_payload;
 173:../lib/phc.c  **** 		}
 174:../lib/phc.c  **** 		else
 175:../lib/phc.c  **** 		{
 176:../lib/phc.c  **** 			phc_rcv_state = rcv_crc_lsb;
 177:../lib/phc.c  **** 		}
 178:../lib/phc.c  **** 		break;
 179:../lib/phc.c  **** 
 180:../lib/phc.c  **** 	case rcv_payload:
 181:../lib/phc.c  **** 		phc_fn_payload(phc_pos++, byte); // call handler function	
 182:../lib/phc.c  **** 		if (phc_pos == phc_len)
 183:../lib/phc.c  **** 		{
 184:../lib/phc.c  **** 			phc_crc_calc ^= 0xFFFF; // finalize calculated CRC
 185:../lib/phc.c  **** 			phc_rcv_state = rcv_crc_lsb;
 186:../lib/phc.c  **** 		}
 187:../lib/phc.c  **** 		break;
 188:../lib/phc.c  **** 		
 189:../lib/phc.c  **** 	case rcv_crc_lsb:
 190:../lib/phc.c  **** 		phc_crc_rcv = byte;
 191:../lib/phc.c  **** 		phc_rcv_state = rcv_crc_msb;
 192:../lib/phc.c  **** 		break;
 193:../lib/phc.c  **** 	
 194:../lib/phc.c  **** 	case rcv_crc_msb:
 195:../lib/phc.c  ****         {
 196:../lib/phc.c  ****             uint8_t valid, same;
 197:../lib/phc.c  **** 
 198:../lib/phc.c  ****             phc_crc_rcv |= (uint16_t)byte << 8;
 199:../lib/phc.c  **** 		    valid = (phc_crc_calc == phc_crc_rcv); 
 200:../lib/phc.c  ****             same = ((phc_crc_rcv == phc_last_crc) && (timer_ticks - phc_last_time) <= RETRY_INTERVA
 201:../lib/phc.c  **** 		    phc_fn_end(valid, same); // call closing handler
 202:../lib/phc.c  **** 
 203:../lib/phc.c  ****             if (valid) // if valid
 204:../lib/phc.c  ****             {
 205:../lib/phc.c  ****                 phc_last_crc = phc_crc_rcv; // remember compare values
 206:../lib/phc.c  ****                 phc_last_time = timer_ticks;
 207:../lib/phc.c  ****             }
 208:../lib/phc.c  **** 		    packet_init(); // reset state machine
 209:../lib/phc.c  ****         }
 210:../lib/phc.c  **** 		break;
 211:../lib/phc.c  **** 
 212:../lib/phc.c  **** 	default:
 213:../lib/phc.c  **** 		ASSERT(0);
 214:../lib/phc.c  **** 	
 215:../lib/phc.c  **** 	}
 216:../lib/phc.c  **** }
 217:../lib/phc.c  **** 
 218:../lib/phc.c  **** // receive timeout (interrupt context)
 219:../lib/phc.c  **** void phc_timeout(void)
 220:../lib/phc.c  **** {
 137               	.LM7:
 138               	.LFBB2:
 139               	/* prologue: function */
 140               	/* frame size = 0 */
 141               	.LBB19:
 142               	.LBB20:
 144               	.LM8:
 145 002a 1092 0000 		sts phc_rcv_state,__zero_reg__
 147               	.LM9:
 148 002e 8FEF      		ldi r24,lo8(-1)
 149 0030 9FEF      		ldi r25,hi8(-1)
 150 0032 9093 0000 		sts (phc_crc_calc)+1,r25
 151 0036 8093 0000 		sts phc_crc_calc,r24
 152               	/* epilogue start */
 153               	.LBE20:
 154               	.LBE19:
 221:../lib/phc.c  **** 	packet_init();
 222:../lib/phc.c  **** }
 156               	.LM10:
 157 003a 0895      		ret
 159               	.Lscope2:
 162               	.global	phc_rcv_byte
 164               	phc_rcv_byte:
 166               	.LM11:
 167               	.LFBB3:
 168 003c 1F93      		push r17
 169               	/* prologue: function */
 170               	/* frame size = 0 */
 171 003e 682F      		mov r22,r24
 173               	.LM12:
 174 0040 2091 0000 		lds r18,phc_rcv_state
 175 0044 2330      		cpi r18,lo8(3)
 176 0046 00F4      		brsh .L6
 177               	.LBB21:
 178               	.LBB22:
 180               	.Ltext1:
   1:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** /* Copyright (c) 2002, 2003, 2004  Marek Michalkiewicz
   2:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****    Copyright (c) 2005, 2007 Joerg Wunsch
   3:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****    All rights reserved.
   4:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 
   5:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****    Redistribution and use in source and binary forms, with or without
   6:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****    modification, are permitted provided that the following conditions are met:
   7:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 
   8:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****    * Redistributions of source code must retain the above copyright
   9:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****      notice, this list of conditions and the following disclaimer.
  10:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 
  11:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****    * Redistributions in binary form must reproduce the above copyright
  12:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****      notice, this list of conditions and the following disclaimer in
  13:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****      the documentation and/or other materials provided with the
  14:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****      distribution.
  15:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 
  16:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****    * Neither the name of the copyright holders nor the names of
  17:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****      contributors may be used to endorse or promote products derived
  18:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****      from this software without specific prior written permission.
  19:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 
  20:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 
  32:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** /* $Id: crc16.h,v 1.4 2007/01/23 15:32:48 joerg_wunsch Exp $ */
  33:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 
  34:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** #ifndef _UTIL_CRC16_H_
  35:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** #define _UTIL_CRC16_H_
  36:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 
  37:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** #include <stdint.h>
  38:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 
  39:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** /** \file */
  40:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** /** \defgroup util_crc <util/crc16.h>: CRC Computations
  41:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****     \code#include <util/crc16.h>\endcode
  42:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 
  43:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****     This header file provides a optimized inline functions for calculating
  44:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****     cyclic redundancy checks (CRC) using common polynomials.
  45:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 
  46:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****     \par References:
  47:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 
  48:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****     \par
  49:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 
  50:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****     See the Dallas Semiconductor app note 27 for 8051 assembler example and
  51:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****     general CRC optimization suggestions. The table on the last page of the
  52:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****     app note is the key to understanding these implementations.
  53:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 
  54:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****     \par
  55:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 
  56:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****     Jack Crenshaw's "Implementing CRCs" article in the January 1992 isue of \e
  57:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****     Embedded \e Systems \e Programming. This may be difficult to find, but it
  58:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****     explains CRC's in very clear and concise terms. Well worth the effort to
  59:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****     obtain a copy.
  60:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 
  61:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****     A typical application would look like:
  62:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 
  63:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****     \code
  64:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****     // Dallas iButton test vector.
  65:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****     uint8_t serno[] = { 0x02, 0x1c, 0xb8, 0x01, 0, 0, 0, 0xa2 };
  66:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 
  67:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****     int
  68:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****     checkcrc(void)
  69:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****     {
  70:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 	uint8_t crc = 0, i;
  71:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 
  72:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 	for (i = 0; i < sizeof serno / sizeof serno[0]; i++)
  73:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 	    crc = _crc_ibutton_update(crc, serno[i]);
  74:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 
  75:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 	return crc; // must be 0
  76:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****     }
  77:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****     \endcode
  78:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** */
  79:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 
  80:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** /** \ingroup util_crc
  81:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****     Optimized CRC-16 calculation.
  82:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 
  83:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****     Polynomial: x^16 + x^15 + x^2 + 1 (0xa001)<br>
  84:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****     Initial value: 0xffff
  85:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 
  86:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****     This CRC is normally used in disk-drive controllers.
  87:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 
  88:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****     The following is the equivalent functionality written in C.
  89:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 
  90:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****     \code
  91:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****     uint16_t
  92:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****     crc16_update(uint16_t crc, uint8_t a)
  93:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****     {
  94:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 	int i;
  95:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 
  96:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 	crc ^= a;
  97:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 	for (i = 0; i < 8; ++i)
  98:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 	{
  99:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 	    if (crc & 1)
 100:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 		crc = (crc >> 1) ^ 0xA001;
 101:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 	    else
 102:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 		crc = (crc >> 1);
 103:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 	}
 104:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 
 105:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 	return crc;
 106:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****     }
 107:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 
 108:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****     \endcode */
 109:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 
 110:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** static __inline__ uint16_t
 111:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** _crc16_update(uint16_t __crc, uint8_t __data)
 112:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** {
 113:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 	uint8_t __tmp;
 114:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 	uint16_t __ret;
 115:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 
 116:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 	__asm__ __volatile__ (
 117:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 		"eor %A0,%2" "\n\t"
 118:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 		"mov %1,%A0" "\n\t"
 119:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 		"swap %1" "\n\t"
 120:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 		"eor %1,%A0" "\n\t"
 121:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 		"mov __tmp_reg__,%1" "\n\t"
 122:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 		"lsr %1" "\n\t"
 123:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 		"lsr %1" "\n\t"
 124:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 		"eor %1,__tmp_reg__" "\n\t"
 125:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 		"mov __tmp_reg__,%1" "\n\t"
 126:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 		"lsr %1" "\n\t"
 127:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 		"eor %1,__tmp_reg__" "\n\t"
 128:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 		"andi %1,0x07" "\n\t"
 129:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 		"mov __tmp_reg__,%A0" "\n\t"
 130:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 		"mov %A0,%B0" "\n\t"
 131:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 		"lsr %1" "\n\t"
 132:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 		"ror __tmp_reg__" "\n\t"
 133:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 		"ror %1" "\n\t"
 134:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 		"mov %B0,__tmp_reg__" "\n\t"
 135:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 		"eor %A0,%1" "\n\t"
 136:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 		"lsr __tmp_reg__" "\n\t"
 137:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 		"ror %1" "\n\t"
 138:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 		"eor %B0,__tmp_reg__" "\n\t"
 139:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 		"eor %A0,%1"
 140:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 		: "=r" (__ret), "=d" (__tmp)
 141:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 		: "r" (__data), "0" (__crc)
 142:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 		: "r0"
 143:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 	);
 144:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 	return __ret;
 145:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** }
 146:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 
 147:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** /** \ingroup util_crc
 148:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****     Optimized CRC-XMODEM calculation.
 149:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 
 150:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****     Polynomial: x^16 + x^12 + x^5 + 1 (0x1021)<br>
 151:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****     Initial value: 0x0
 152:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 
 153:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****     This is the CRC used by the Xmodem-CRC protocol.
 154:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 
 155:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****     The following is the equivalent functionality written in C.
 156:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 
 157:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****     \code
 158:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****     uint16_t
 159:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****     crc_xmodem_update (uint16_t crc, uint8_t data)
 160:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****     {
 161:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****         int i;
 162:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 
 163:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****         crc = crc ^ ((uint16_t)data << 8);
 164:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****         for (i=0; i<8; i++)
 165:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****         {
 166:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****             if (crc & 0x8000)
 167:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****                 crc = (crc << 1) ^ 0x1021;
 168:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****             else
 169:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****                 crc <<= 1;
 170:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****         }
 171:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 
 172:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****         return crc;
 173:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****     }
 174:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****     \endcode */
 175:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 
 176:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** static __inline__ uint16_t
 177:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** _crc_xmodem_update(uint16_t __crc, uint8_t __data)
 178:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** {
 179:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****     uint16_t __ret;             /* %B0:%A0 (alias for __crc) */
 180:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****     uint8_t __tmp1;             /* %1 */
 181:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****     uint8_t __tmp2;             /* %2 */
 182:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****                                 /* %3  __data */
 183:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 
 184:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****     __asm__ __volatile__ (
 185:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****         "eor    %B0,%3"          "\n\t" /* crc.hi ^ data */
 186:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****         "mov    __tmp_reg__,%B0" "\n\t"
 187:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****         "swap   __tmp_reg__"     "\n\t" /* swap(crc.hi ^ data) */
 188:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 
 189:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****         /* Calculate the ret.lo of the CRC. */
 190:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****         "mov    %1,__tmp_reg__"  "\n\t"
 191:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****         "andi   %1,0x0f"         "\n\t"
 192:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****         "eor    %1,%B0"          "\n\t"
 193:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****         "mov    %2,%B0"          "\n\t"
 194:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****         "eor    %2,__tmp_reg__"  "\n\t"
 195:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****         "lsl    %2"              "\n\t"
 196:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****         "andi   %2,0xe0"         "\n\t"
 197:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****         "eor    %1,%2"           "\n\t" /* __tmp1 is now ret.lo. */
 198:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 
 199:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****         /* Calculate the ret.hi of the CRC. */
 200:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****         "mov    %2,__tmp_reg__"  "\n\t"
 201:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****         "eor    %2,%B0"          "\n\t"
 202:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****         "andi   %2,0xf0"         "\n\t"
 203:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****         "lsr    %2"              "\n\t"
 204:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****         "mov    __tmp_reg__,%B0" "\n\t"
 205:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****         "lsl    __tmp_reg__"     "\n\t"
 206:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****         "rol    %2"              "\n\t"
 207:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****         "lsr    %B0"             "\n\t"
 208:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****         "lsr    %B0"             "\n\t"
 209:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****         "lsr    %B0"             "\n\t"
 210:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****         "andi   %B0,0x1f"        "\n\t"
 211:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****         "eor    %B0,%2"          "\n\t"
 212:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****         "eor    %B0,%A0"         "\n\t" /* ret.hi is now ready. */
 213:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****         "mov    %A0,%1"          "\n\t" /* ret.lo is now ready. */
 214:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****         : "=d" (__ret), "=d" (__tmp1), "=d" (__tmp2)
 215:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****         : "r" (__data), "0" (__crc)
 216:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****         : "r0"
 217:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****     );
 218:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****     return __ret;
 219:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** }
 220:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 
 221:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** /** \ingroup util_crc
 222:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****     Optimized CRC-CCITT calculation.
 223:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 
 224:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****     Polynomial: x^16 + x^12 + x^5 + 1 (0x8408)<br>
 225:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****     Initial value: 0xffff
 226:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 
 227:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****     This is the CRC used by PPP and IrDA.
 228:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 
 229:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****     See RFC1171 (PPP protocol) and IrDA IrLAP 1.1
 230:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 
 231:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****     \note Although the CCITT polynomial is the same as that used by the Xmodem
 232:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****     protocol, they are quite different. The difference is in how the bits are
 233:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****     shifted through the alorgithm. Xmodem shifts the MSB of the CRC and the
 234:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****     input first, while CCITT shifts the LSB of the CRC and the input first.
 235:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 
 236:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****     The following is the equivalent functionality written in C.
 237:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 
 238:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****     \code
 239:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****     uint16_t
 240:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****     crc_ccitt_update (uint16_t crc, uint8_t data)
 241:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****     {
 242:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****         data ^= lo8 (crc);
 243:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****         data ^= data << 4;
 244:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 
 245:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****         return ((((uint16_t)data << 8) | hi8 (crc)) ^ (uint8_t)(data >> 4) 
 246:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****                 ^ ((uint16_t)data << 3));
 247:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****     }
 248:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****     \endcode */
 249:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 
 250:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** static __inline__ uint16_t
 251:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** _crc_ccitt_update (uint16_t __crc, uint8_t __data)
 252:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** {
 253:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****     uint16_t __ret;
 254:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h **** 
 255:/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h ****     __asm__ __volatile__ (
 182               	.LM13:
 183 0048 8091 0000 		lds r24,phc_crc_calc
 184 004c 9091 0000 		lds r25,(phc_crc_calc)+1
 185               	/* #APP */
 186               	 ;  255 "/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h" 1
 187 0050 8627      		eor    r24,r22
 188 0052 082E      		mov    __tmp_reg__,r24
 189 0054 8295      		swap   r24
 190 0056 807F      		andi   r24,0xf0
 191 0058 8025      		eor    r24,__tmp_reg__
 192 005a 092E      		mov    __tmp_reg__,r25
 193 005c 982F      		mov    r25,r24
 194 005e 8295      		swap   r24
 195 0060 8F70      		andi   r24,0x0f
 196 0062 0826      		eor    __tmp_reg__,r24
 197 0064 8695      		lsr    r24
 198 0066 9827      		eor    r25,r24
 199 0068 8927      		eor    r24,r25
 200 006a 880F      		lsl    r24
 201 006c 880F      		lsl    r24
 202 006e 880F      		lsl    r24
 203 0070 8025      		eor    r24,__tmp_reg__
 204               	 ;  0 "" 2
 205               	/* #NOAPP */
 206               	.LBE22:
 207               	.LBE21:
 209               	.Ltext2:
 211               	.LM14:
 212 0072 9093 0000 		sts (phc_crc_calc)+1,r25
 213 0076 8093 0000 		sts phc_crc_calc,r24
 214               	.L6:
 216               	.LM15:
 217 007a 2230      		cpi r18,lo8(2)
 218 007c 01F4      		brne .+2
 219 007e 00C0      		rjmp .L10
 220 0080 2330      		cpi r18,lo8(3)
 221 0082 00F0      		brlo .L24
 222 0084 2330      		cpi r18,lo8(3)
 223 0086 01F4      		brne .+2
 224 0088 00C0      		rjmp .L11
 225 008a 2430      		cpi r18,lo8(4)
 226 008c 01F0      		breq .L25
 227               	.L7:
 229               	.LM16:
 230 008e 85E0      		ldi r24,lo8(5)
 231 0090 65ED      		ldi r22,lo8(213)
 232 0092 70E0      		ldi r23,hi8(213)
 233 0094 0E94 0000 		call hal_assert
 234               	.L21:
 235               	/* epilogue start */
 237               	.LM17:
 238 0098 1F91      		pop r17
 239 009a 0895      		ret
 240               	.L24:
 242               	.LM18:
 243 009c 2223      		tst r18
 244 009e 01F0      		breq .L8
 245 00a0 2130      		cpi r18,lo8(1)
 246 00a2 01F4      		brne .L7
 248               	.LM19:
 249 00a4 462F      		mov r20,r22
 250 00a6 4F77      		andi r20,lo8(127)
 251 00a8 4093 0000 		sts phc_len,r20
 253               	.LM20:
 254 00ac 661F      		rol r22
 255 00ae 6627      		clr r22
 256 00b0 661F      		rol r22
 257 00b2 E091 0000 		lds r30,pch_fn_start
 258 00b6 F091 0000 		lds r31,(pch_fn_start)+1
 259 00ba 8091 0000 		lds r24,phc_addr
 260 00be 0995      		icall
 262               	.LM21:
 263 00c0 8091 0000 		lds r24,phc_len
 264 00c4 8823      		tst r24
 265 00c6 01F4      		brne .+2
 266 00c8 00C0      		rjmp .L22
 268               	.LM22:
 269 00ca 1092 0000 		sts phc_pos,__zero_reg__
 271               	.LM23:
 272 00ce 82E0      		ldi r24,lo8(2)
 273 00d0 8093 0000 		sts phc_rcv_state,r24
 274 00d4 00C0      		rjmp .L21
 275               	.L8:
 277               	.LM24:
 278 00d6 6093 0000 		sts phc_addr,r22
 280               	.LM25:
 281 00da 81E0      		ldi r24,lo8(1)
 282 00dc 8093 0000 		sts phc_rcv_state,r24
 284               	.LM26:
 285 00e0 0E94 0000 		call timer_performance_counter
 286 00e4 0E94 0000 		call rand_randomize
 288               	.LM27:
 289 00e8 1F91      		pop r17
 290 00ea 0895      		ret
 291               	.L25:
 292               	.LBB23:
 294               	.LM28:
 295 00ec 962F      		mov r25,r22
 296 00ee 80E0      		ldi r24,lo8(0)
 297 00f0 2091 0000 		lds r18,phc_crc_rcv
 298 00f4 3091 0000 		lds r19,(phc_crc_rcv)+1
 299 00f8 282B      		or r18,r24
 300 00fa 392B      		or r19,r25
 301 00fc 3093 0000 		sts (phc_crc_rcv)+1,r19
 302 0100 2093 0000 		sts phc_crc_rcv,r18
 304               	.LM29:
 305 0104 10E0      		ldi r17,lo8(0)
 306 0106 8091 0000 		lds r24,phc_crc_calc
 307 010a 9091 0000 		lds r25,(phc_crc_calc)+1
 308 010e 2817      		cp r18,r24
 309 0110 3907      		cpc r19,r25
 310 0112 01F4      		brne .+2
 311 0114 00C0      		rjmp .L26
 312               	.L16:
 314               	.LM30:
 315 0116 8091 0000 		lds r24,phc_last_crc
 316 011a 9091 0000 		lds r25,(phc_last_crc)+1
 317 011e 2817      		cp r18,r24
 318 0120 3907      		cpc r19,r25
 319 0122 01F4      		brne .+2
 320 0124 00C0      		rjmp .L17
 321 0126 60E0      		ldi r22,lo8(0)
 322               	.L18:
 324               	.LM31:
 325 0128 E091 0000 		lds r30,phc_fn_end
 326 012c F091 0000 		lds r31,(phc_fn_end)+1
 327 0130 812F      		mov r24,r17
 328 0132 0995      		icall
 330               	.LM32:
 331 0134 1123      		tst r17
 332 0136 01F0      		breq .L20
 334               	.LM33:
 335 0138 8091 0000 		lds r24,phc_crc_rcv
 336 013c 9091 0000 		lds r25,(phc_crc_rcv)+1
 337 0140 9093 0000 		sts (phc_last_crc)+1,r25
 338 0144 8093 0000 		sts phc_last_crc,r24
 340               	.LM34:
 341 0148 8091 0000 		lds r24,timer_ticks
 342 014c 9091 0000 		lds r25,(timer_ticks)+1
 343 0150 A091 0000 		lds r26,(timer_ticks)+2
 344 0154 B091 0000 		lds r27,(timer_ticks)+3
 345 0158 8093 0000 		sts phc_last_time,r24
 346 015c 9093 0000 		sts (phc_last_time)+1,r25
 347 0160 A093 0000 		sts (phc_last_time)+2,r26
 348 0164 B093 0000 		sts (phc_last_time)+3,r27
 349               	.L20:
 350               	.LBB24:
 351               	.LBB25:
 353               	.LM35:
 354 0168 1092 0000 		sts phc_rcv_state,__zero_reg__
 356               	.LM36:
 357 016c 8FEF      		ldi r24,lo8(-1)
 358 016e 9FEF      		ldi r25,hi8(-1)
 359 0170 9093 0000 		sts (phc_crc_calc)+1,r25
 360 0174 8093 0000 		sts phc_crc_calc,r24
 361               	.LBE25:
 362               	.LBE24:
 363               	.LBE23:
 365               	.LM37:
 366 0178 1F91      		pop r17
 367 017a 0895      		ret
 368               	.L11:
 370               	.LM38:
 371 017c 6093 0000 		sts phc_crc_rcv,r22
 372 0180 1092 0000 		sts phc_crc_rcv+1,__zero_reg__
 374               	.LM39:
 375 0184 84E0      		ldi r24,lo8(4)
 376 0186 8093 0000 		sts phc_rcv_state,r24
 378               	.LM40:
 379 018a 1F91      		pop r17
 380 018c 0895      		ret
 381               	.L10:
 383               	.LM41:
 384 018e E091 0000 		lds r30,phc_fn_payload
 385 0192 F091 0000 		lds r31,(phc_fn_payload)+1
 386 0196 8091 0000 		lds r24,phc_pos
 387 019a 8F5F      		subi r24,lo8(-(1))
 388 019c 8093 0000 		sts phc_pos,r24
 389 01a0 8150      		subi r24,lo8(-(-1))
 390 01a2 0995      		icall
 392               	.LM42:
 393 01a4 9091 0000 		lds r25,phc_pos
 394 01a8 8091 0000 		lds r24,phc_len
 395 01ac 9817      		cp r25,r24
 396 01ae 01F0      		breq .+2
 397 01b0 00C0      		rjmp .L21
 399               	.LM43:
 400 01b2 8091 0000 		lds r24,phc_crc_calc
 401 01b6 9091 0000 		lds r25,(phc_crc_calc)+1
 402 01ba 8095      		com r24
 403 01bc 9095      		com r25
 404 01be 9093 0000 		sts (phc_crc_calc)+1,r25
 405 01c2 8093 0000 		sts phc_crc_calc,r24
 406               	.L22:
 408               	.LM44:
 409 01c6 83E0      		ldi r24,lo8(3)
 410 01c8 8093 0000 		sts phc_rcv_state,r24
 412               	.LM45:
 413 01cc 1F91      		pop r17
 414 01ce 0895      		ret
 415               	.L17:
 416               	.LBB26:
 418               	.LM46:
 419 01d0 60E0      		ldi r22,lo8(0)
 420 01d2 8091 0000 		lds r24,timer_ticks
 421 01d6 9091 0000 		lds r25,(timer_ticks)+1
 422 01da A091 0000 		lds r26,(timer_ticks)+2
 423 01de B091 0000 		lds r27,(timer_ticks)+3
 424 01e2 2091 0000 		lds r18,phc_last_time
 425 01e6 3091 0000 		lds r19,(phc_last_time)+1
 426 01ea 4091 0000 		lds r20,(phc_last_time)+2
 427 01ee 5091 0000 		lds r21,(phc_last_time)+3
 428 01f2 821B      		sub r24,r18
 429 01f4 930B      		sbc r25,r19
 430 01f6 A40B      		sbc r26,r20
 431 01f8 B50B      		sbc r27,r21
 432 01fa C397      		sbiw r24,51
 433 01fc A105      		cpc r26,__zero_reg__
 434 01fe B105      		cpc r27,__zero_reg__
 435 0200 00F4      		brsh .L27
 436               	.L19:
 437 0202 81E0      		ldi r24,lo8(1)
 438 0204 6827      		eor r22,r24
 439 0206 00C0      		rjmp .L18
 440               	.L27:
 441 0208 61E0      		ldi r22,lo8(1)
 442 020a 00C0      		rjmp .L19
 443               	.L26:
 445               	.LM47:
 446 020c 11E0      		ldi r17,lo8(1)
 447 020e 00C0      		rjmp .L16
 448               	.LBE26:
 456               	.Lscope3:
 462               	.global	phc_send
 464               	phc_send:
 466               	.LM48:
 467               	.LFBB4:
 468               	/* prologue: function */
 469               	/* frame size = 0 */
 470 0210 DB01      		movw r26,r22
 472               	.LM49:
 473 0212 8C93      		st X,r24
 475               	.LM50:
 476 0214 2223      		tst r18
 477 0216 01F0      		breq .+2
 478 0218 00C0      		rjmp .L29
 479 021a 80E0      		ldi r24,lo8(0)
 480               	.L30:
 481 021c 842B      		or r24,r20
 482 021e 1196      		adiw r26,1
 483 0220 8C93      		st X,r24
 484 0222 1197      		sbiw r26,1
 486               	.LM51:
 487 0224 642F      		mov r22,r20
 488 0226 6E5F      		subi r22,lo8(-(2))
 489               	.LBB27:
 490               	.LBB28:
 492               	.LM52:
 493 0228 01F4      		brne .+2
 494 022a 00C0      		rjmp .L36
 495 022c FD01      		movw r30,r26
 496 022e 2FEF      		ldi r18,lo8(-1)
 497 0230 3FEF      		ldi r19,hi8(-1)
 498 0232 4F5F      		subi r20,lo8(-(1))
 499 0234 50E0      		ldi r21,lo8(0)
 500 0236 4F5F      		subi r20,lo8(-(1))
 501 0238 5F4F      		sbci r21,hi8(-(1))
 502 023a 4A0F      		add r20,r26
 503 023c 5B1F      		adc r21,r27
 504               	.L33:
 506               	.LM53:
 507 023e 8191      		ld r24,Z+
 508               	.LBB29:
 509               	.LBB30:
 511               	.Ltext3:
 513               	.LM54:
 514               	/* #APP */
 515               	 ;  255 "/usr/lib/gcc/avr/4.3.2/../../../avr/include/util/crc16.h" 1
 516 0240 2827      		eor    r18,r24
 517 0242 022E      		mov    __tmp_reg__,r18
 518 0244 2295      		swap   r18
 519 0246 207F      		andi   r18,0xf0
 520 0248 2025      		eor    r18,__tmp_reg__
 521 024a 032E      		mov    __tmp_reg__,r19
 522 024c 322F      		mov    r19,r18
 523 024e 2295      		swap   r18
 524 0250 2F70      		andi   r18,0x0f
 525 0252 0226      		eor    __tmp_reg__,r18
 526 0254 2695      		lsr    r18
 527 0256 3227      		eor    r19,r18
 528 0258 2327      		eor    r18,r19
 529 025a 220F      		lsl    r18
 530 025c 220F      		lsl    r18
 531 025e 220F      		lsl    r18
 532 0260 2025      		eor    r18,__tmp_reg__
 533               	 ;  0 "" 2
 534               	/* #NOAPP */
 535               	.LBE30:
 536               	.LBE29:
 538               	.Ltext4:
 540               	.LM55:
 541 0262 E417      		cp r30,r20
 542 0264 F507      		cpc r31,r21
 543 0266 01F4      		brne .L33
 544 0268 C901      		movw r24,r18
 545 026a 8095      		com r24
 546 026c 9095      		com r25
 547 026e 282F      		mov r18,r24
 548 0270 892F      		mov r24,r25
 549               	.L32:
 550               	.LBE28:
 551               	.LBE27:
 553               	.LM56:
 554 0272 FD01      		movw r30,r26
 555 0274 E60F      		add r30,r22
 556 0276 F11D      		adc r31,__zero_reg__
 557 0278 2083      		st Z,r18
 559               	.LM57:
 560 027a 8183      		std Z+1,r24
 562               	.LM58:
 563 027c 6E5F      		subi r22,lo8(-(2))
 564 027e CD01      		movw r24,r26
 565 0280 0E94 0000 		call uart_send
 566               	/* epilogue start */
 568               	.LM59:
 569 0284 0895      		ret
 570               	.L29:
 572               	.LM60:
 573 0286 80E8      		ldi r24,lo8(-128)
 574 0288 00C0      		rjmp .L30
 575               	.L36:
 576               	.LBB32:
 577               	.LBB31:
 579               	.LM61:
 580 028a 20E0      		ldi r18,lo8(0)
 581 028c 80E0      		ldi r24,lo8(0)
 582 028e 00C0      		rjmp .L32
 583               	.LBE31:
 584               	.LBE32:
 598               	.Lscope4:
 599               		.lcomm pch_fn_start,2
 600               		.lcomm phc_fn_payload,2
 601               		.lcomm phc_fn_end,2
 602               		.lcomm phc_addr,1
 603               		.lcomm phc_len,1
 604               		.lcomm phc_pos,1
 605               		.lcomm phc_crc_rcv,2
 606               		.lcomm phc_crc_calc,2
 607               		.lcomm phc_rcv_state,1
 608               		.comm phc_last_time,4,1
 609               		.comm phc_last_crc,2,1
 622               	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 phc.c
     /tmp/cch7tbzN.s:2      *ABS*:0000003f __SREG__
     /tmp/cch7tbzN.s:3      *ABS*:0000003e __SP_H__
     /tmp/cch7tbzN.s:4      *ABS*:0000003d __SP_L__
     /tmp/cch7tbzN.s:5      *ABS*:00000034 __CCP__
     /tmp/cch7tbzN.s:6      *ABS*:00000000 __tmp_reg__
     /tmp/cch7tbzN.s:7      *ABS*:00000001 __zero_reg__
     /tmp/cch7tbzN.s:95     .text:00000000 phc_init
                             .bss:00000000 pch_fn_start
     /tmp/cch7tbzN.s:599    .bss:00000002 phc_fn_payload
     /tmp/cch7tbzN.s:600    .bss:00000004 phc_fn_end
     /tmp/cch7tbzN.s:606    .bss:0000000d phc_rcv_state
     /tmp/cch7tbzN.s:605    .bss:0000000b phc_crc_calc
     /tmp/cch7tbzN.s:135    .text:0000002a phc_timeout
     /tmp/cch7tbzN.s:164    .text:0000003c phc_rcv_byte
     /tmp/cch7tbzN.s:602    .bss:00000007 phc_len
     /tmp/cch7tbzN.s:601    .bss:00000006 phc_addr
     /tmp/cch7tbzN.s:603    .bss:00000008 phc_pos
     /tmp/cch7tbzN.s:604    .bss:00000009 phc_crc_rcv
                            *COM*:00000002 phc_last_crc
                            *COM*:00000004 phc_last_time
     /tmp/cch7tbzN.s:464    .text:00000210 phc_send

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
hal_assert
timer_performance_counter
rand_randomize
timer_ticks
uart_send
